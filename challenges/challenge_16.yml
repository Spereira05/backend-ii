name: Python Application CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8 black
    
    - name: Check code formatting with black
      run: |
        black . --check --diff
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest --cov=./ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          coverage.xml
          .coverage
          pytest-report.html

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Archive built package
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    # Only run deployment on pushes to main/master branch, not on pull requests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Download built package
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Set up environment for deployment
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Example deployment commands would go here
        # For a real project, you might deploy to a test server:
        # - scp or rsync files to a remote server
        # - Use a cloud provider's CLI to deploy
        # - Use Docker to build and push images
    
    - name: Run smoke tests on staging
      run: |
        echo "Running smoke tests on staging environment..."
        # Run some basic tests to verify deployment worked
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # In a real workflow, you might:
        # 1. Use a cloud provider CLI (AWS, GCP, Azure) to deploy
        # 2. Use Kubernetes commands to update deployments
        # 3. Upload to PyPI if it's a Python package:
        #    twine upload dist/*
    
    - name: Send deployment notification
      run: |
        echo "Sending deployment notification..."
        # This could be a webhook to Slack, Discord, Teams, etc.
        # curl -X POST -H 'Content-type: application/json' --data '{"text":"New deployment successful!"}' ${{ secrets.SLACK_WEBHOOK_URL }}